#define m_index 16
#include <stdio.h>
#include <stdlib.h>
#include <sys/mman.h>
#include <sys/types.h>
#include <sys/wait.h>
#include <unistd.h>
static int *r;
// int fork_search(int a[], int search, int start, int end) {
//     if (start == end) {
//         if (*(a + end) == search) {
//             return 1;
//         }

//        return 0;
//     } else{
//         pid_t child = fork();
//         if (child == 0)
//             return fork_search(a, search, start, (start+end)/2);
//         else {
//             // creating the second son here
//             pid_t child2 = fork();
//             if (child2 == 0)
//                 return fork_search(a, search, (start + end)/2+1, end);
//         }
//     }
// }
 
int cautare_fork(int a[], int *r, int search, int start, int end){
if(start==end){
if(*(a+end)==search){
          return *r=*r+1;
}
// printf("%d ", *(a+start));

return *r;

}
else 
{pid_t child = fork();
if (child == 0)
{*r= cautare_fork(a, r, search, start, (start+end)/2);
 
 }
 else {pid_t child2 = fork();
            if (child2 == 0)
               *r= cautare_fork(a, r, search, (start + end)/2+1, end);
                
  }


}


return *r;

}
int main(int argc, char* argv[]) {


 r = mmap(NULL, sizeof *r, PROT_READ | PROT_WRITE, 
                    MAP_SHARED | MAP_ANONYMOUS, -1, 0);


    *r = 0;
   char *p;
   long conv;
   int a[argc]  ;
    for(int i=1; i<argc;i++){
  conv = strtol(argv[i], &p, 10);
     a[i]= conv;
     
       } 
    printf("%d\n", cautare_fork(a,r, 12, 0, argc));

    return 0;
}